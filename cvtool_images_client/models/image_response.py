# coding: utf-8

"""
    CvTool Image API

    Image services.

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ImageResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, version=None, job_id=None, original_uri=None, annotations=None, exif_annotations=None):
        """
        ImageResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'version': 'str',
            'job_id': 'str',
            'original_uri': 'str',
            'annotations': 'Annotations',
            'exif_annotations': 'Annotations'
        }

        self.attribute_map = {
            'id': 'id',
            'version': 'version',
            'job_id': 'job_id',
            'original_uri': 'original_uri',
            'annotations': 'annotations',
            'exif_annotations': 'exif_annotations'
        }

        self._id = id
        self._version = version
        self._job_id = job_id
        self._original_uri = original_uri
        self._annotations = annotations
        self._exif_annotations = exif_annotations

    @property
    def id(self):
        """
        Gets the id of this ImageResponse.
        Image id.

        :return: The id of this ImageResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ImageResponse.
        Image id.

        :param id: The id of this ImageResponse.
        :type: str
        """

        self._id = id

    @property
    def version(self):
        """
        Gets the version of this ImageResponse.
        Image version id.

        :return: The version of this ImageResponse.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this ImageResponse.
        Image version id.

        :param version: The version of this ImageResponse.
        :type: str
        """

        self._version = version

    @property
    def job_id(self):
        """
        Gets the job_id of this ImageResponse.
        Job id.

        :return: The job_id of this ImageResponse.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """
        Sets the job_id of this ImageResponse.
        Job id.

        :param job_id: The job_id of this ImageResponse.
        :type: str
        """

        self._job_id = job_id

    @property
    def original_uri(self):
        """
        Gets the original_uri of this ImageResponse.
        The image to add to the database.

        :return: The original_uri of this ImageResponse.
        :rtype: str
        """
        return self._original_uri

    @original_uri.setter
    def original_uri(self, original_uri):
        """
        Sets the original_uri of this ImageResponse.
        The image to add to the database.

        :param original_uri: The original_uri of this ImageResponse.
        :type: str
        """

        self._original_uri = original_uri

    @property
    def annotations(self):
        """
        Gets the annotations of this ImageResponse.

        :return: The annotations of this ImageResponse.
        :rtype: Annotations
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """
        Sets the annotations of this ImageResponse.

        :param annotations: The annotations of this ImageResponse.
        :type: Annotations
        """

        self._annotations = annotations

    @property
    def exif_annotations(self):
        """
        Gets the exif_annotations of this ImageResponse.

        :return: The exif_annotations of this ImageResponse.
        :rtype: Annotations
        """
        return self._exif_annotations

    @exif_annotations.setter
    def exif_annotations(self, exif_annotations):
        """
        Sets the exif_annotations of this ImageResponse.

        :param exif_annotations: The exif_annotations of this ImageResponse.
        :type: Annotations
        """

        self._exif_annotations = exif_annotations

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ImageResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
